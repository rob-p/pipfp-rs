{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>piPFP-rs</code>: A Rust implementation of piPFP for measuring the growth of sequence collections","text":"<p><code>piPFP-rs</code> is a Rust implementation of <code>piPFP</code><sup>2</sup>. It is a program to compute a quantity called \\(\\pi_{w,p}\\), which measures the substring complexity of a sequence or  sequence collection. By looking at how \\(\\pi_{w,p}\\) changes as new sequences are added to the collection, one can infer how much novel sequence is appearing, or how redundant the newly added sequences are compared to what is already present in the collection.  The parameters \\(w\\) (the window size) and \\(p\\) (the sampling factor) affect how  the  value is computed, but \\(\\pi\\) is fairly robust to these values as described in the preprint of Lipt\u00e1k et al.<sup>1</sup>.</p>"},{"location":"#using-pipfp-rs","title":"Using <code>piPFP-rs</code>","text":"<pre><code>Usage: pipfp-rs [OPTIONS] --input &lt;INPUT&gt;\n\nOptions:\n  -i, --input &lt;INPUT&gt;      Either a directory containing FASTA files, or a file with a list of (FASTA) file paths\n  -w &lt;W&gt;                   window size [default: 10]\n  -p &lt;P&gt;                   sparsity [default: 100]\n  -t, --threads &lt;THREADS&gt;  Number of threads [default: all]\n  -n, --normalized         write out normalized \u03c0 values\n  -h, --help               Print help\n  -V, --version            Print version\n</code></pre>"},{"location":"#references","title":"References","text":"<ol> <li> <p>Zsuzsanna Lipt\u00e1k, Simone Luc\u00e0, Francesco Masillo bioRxiv 2025.02.21.639270; doi: https://doi.org/10.1101/2025.02.21.639270 \u21a9</p> </li> <li> <p>pipfp \u21a9</p> </li> </ol>"}]}